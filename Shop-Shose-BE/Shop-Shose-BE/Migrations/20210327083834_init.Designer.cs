// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop_Shose_BE.EF;

namespace Shop_Shose_BE.Migrations
{
    [DbContext(typeof(ShopShoseContext))]
    [Migration("20210327083834_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExamToeicOnline_BackEnd_Clients.Models.LoginInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.HasKey("UserInfoId");

                    b.ToTable("LoginInfos");
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            CustomerId = new Guid("8e5c9bc0-e0f4-459d-8e72-5833800c5b7b"),
                            DateCreate = new DateTime(2021, 3, 27, 15, 38, 33, 73, DateTimeKind.Local).AddTicks(4625),
                            Password = "$2a$11$ju7c5RpEcWasRtEYelz2leTFtKQP.WRBb1TXnfNpHqyoApRhS9le2",
                            Status = "Active",
                            Username = "thanhnhan"
                        },
                        new
                        {
                            AccountId = 2,
                            CustomerId = new Guid("9f92e5f9-14c0-4989-8945-02f87c701d10"),
                            DateCreate = new DateTime(2021, 3, 27, 15, 38, 33, 73, DateTimeKind.Local).AddTicks(4625),
                            Password = "$2a$11$aoDJkLvG0FjnTe42.NOONeUJfvncM03y4KwJYS8utstU6NPRfB5YC",
                            Status = "Active",
                            Username = "Vohoang"
                        });
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Name = "NUSD"
                        },
                        new
                        {
                            BrandId = 2,
                            Name = "NUDE"
                        },
                        new
                        {
                            BrandId = 3,
                            Name = "NUTT"
                        },
                        new
                        {
                            BrandId = 4,
                            Name = "NUCG"
                        });
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Cart_of_Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCarId");

                    b.ToTable("Cart_of_Products");
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Giày thể thao nam"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Giày thể thao nữ"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Giày thể cao gót"
                        });
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = 10,
                            Name = "Đen"
                        },
                        new
                        {
                            ColorId = 11,
                            Name = "Trắng"
                        },
                        new
                        {
                            ColorId = 12,
                            Name = "Kem"
                        },
                        new
                        {
                            ColorId = 13,
                            Name = "Xám"
                        },
                        new
                        {
                            ColorId = 14,
                            Name = "Vàng"
                        });
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Color_Size_Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("Color_Size_Products");
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("8e5c9bc0-e0f4-459d-8e72-5833800c5b7b"),
                            BirthDay = new DateTime(2021, 3, 27, 15, 38, 33, 73, DateTimeKind.Local).AddTicks(4625),
                            Email = "thanhnhan02677@gmail",
                            Image = "",
                            Name = "Nguyễn Thanh Nhân",
                            PhoneNumber = "0363677482"
                        },
                        new
                        {
                            CustomerId = new Guid("9f92e5f9-14c0-4989-8945-02f87c701d10"),
                            BirthDay = new DateTime(2021, 3, 27, 15, 38, 33, 73, DateTimeKind.Local).AddTicks(4625),
                            Email = "Vohoang@gmail",
                            Image = "",
                            Name = "Nguyễn Võ Hoàng",
                            PhoneNumber = "0773829123"
                        });
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Favorite_Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CustomerId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberClick")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Favorite_Products");
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShoppingCarId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ShoppingCarId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePost")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Display")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 2,
                            CategoryId = 1,
                            Description = "- Dép quai ngang với chất liệu da cao cấp kết hợp đế cao su êm nhẹ chống trơn trượt giúp bạn Nam luôn thoải mái, tự tin khi đi chơi, dạo phố, đi làm nơi công sở hay đi dự tiệc.",
                            Name = "Dép nam MWC NADE- 7675",
                            Price = 195.0,
                            Sex = "Male"
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 3,
                            CategoryId = 2,
                            Description = " Đế cao su mềm, êm ái giúp bạn cảm thấy dễ chịu khi di chuyển trong thời gian dài.",
                            Name = "Giày thể thao nữ MWC NUTT- 0523",
                            Price = 295.0,
                            Sex = "Female"
                        });
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.ShoppingCar", b =>
                {
                    b.Property<int>("ShoppingCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("ShoppingCarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCars");
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SizeNumber")
                        .HasColumnType("int");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            SizeNumber = 35
                        },
                        new
                        {
                            SizeId = 2,
                            SizeNumber = 36
                        },
                        new
                        {
                            SizeId = 3,
                            SizeNumber = 37
                        },
                        new
                        {
                            SizeId = 4,
                            SizeNumber = 38
                        },
                        new
                        {
                            SizeId = 5,
                            SizeNumber = 39
                        },
                        new
                        {
                            SizeId = 6,
                            SizeNumber = 40
                        });
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Account", b =>
                {
                    b.HasOne("Shop_Shose_BE.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Cart_of_Product", b =>
                {
                    b.HasOne("Shop_Shose_BE.Models.Product", "Product")
                        .WithMany("Cart_of_Products")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop_Shose_BE.Models.ShoppingCar", "ShoppingCar")
                        .WithMany("Cart_of_Products")
                        .HasForeignKey("ShoppingCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Color_Size_Product", b =>
                {
                    b.HasOne("Shop_Shose_BE.Models.Color", "Color")
                        .WithMany("Color_Of_Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop_Shose_BE.Models.Product", "Product")
                        .WithMany("Color_Of_Products")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop_Shose_BE.Models.Size", "Size")
                        .WithMany("Color_Size_Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Favorite_Product", b =>
                {
                    b.HasOne("Shop_Shose_BE.Models.Category", "Category")
                        .WithMany("Favorite_Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop_Shose_BE.Models.Customer", "Customer")
                        .WithMany("Favorite_Products")
                        .HasForeignKey("CustomerId1");
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Order", b =>
                {
                    b.HasOne("Shop_Shose_BE.Models.ShoppingCar", "ShoppingCar")
                        .WithMany("Orders")
                        .HasForeignKey("ShoppingCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.Product", b =>
                {
                    b.HasOne("Shop_Shose_BE.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop_Shose_BE.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop_Shose_BE.Models.ShoppingCar", b =>
                {
                    b.HasOne("Shop_Shose_BE.Models.Customer", "Customer")
                        .WithMany("ShoppingCars")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
